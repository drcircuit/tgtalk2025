let firePalette256 = [
    [0x00, 0x00, 0x00], [0x00, 0x00, 0x06], [0x00, 0x00, 0x06], [0x00, 0x00, 0x07],
    [0x00, 0x00, 0x08], [0x00, 0x00, 0x08], [0x00, 0x00, 0x09], [0x00, 0x00, 0x0A],
    [0x02, 0x00, 0x0A], [0x04, 0x00, 0x09], [0x06, 0x00, 0x09], [0x08, 0x00, 0x08],
    [0x0A, 0x00, 0x07], [0x0C, 0x00, 0x07], [0x0E, 0x00, 0x06], [0x10, 0x00, 0x05],
    [0x12, 0x00, 0x05], [0x14, 0x00, 0x04], [0x16, 0x00, 0x04], [0x18, 0x00, 0x03],
    [0x1A, 0x00, 0x02], [0x1C, 0x00, 0x02], [0x1E, 0x00, 0x01], [0x20, 0x00, 0x00],
    [0x20, 0x00, 0x00], [0x21, 0x00, 0x00], [0x22, 0x00, 0x00], [0x23, 0x00, 0x00],
    [0x24, 0x00, 0x00], [0x24, 0x00, 0x00], [0x25, 0x00, 0x00], [0x26, 0x00, 0x00],
    [0x27, 0x00, 0x00], [0x28, 0x00, 0x00], [0x28, 0x00, 0x00], [0x29, 0x00, 0x00],
    [0x2A, 0x00, 0x00], [0x2B, 0x00, 0x00], [0x2C, 0x00, 0x00], [0x2D, 0x00, 0x00],
    [0x2E, 0x01, 0x00], [0x2F, 0x01, 0x00], [0x30, 0x02, 0x00], [0x31, 0x02, 0x00],
    [0x32, 0x03, 0x00], [0x33, 0x03, 0x00], [0x34, 0x04, 0x00], [0x35, 0x04, 0x00],
    [0x36, 0x05, 0x00], [0x37, 0x05, 0x00], [0x38, 0x06, 0x00], [0x39, 0x06, 0x00],
    [0x3A, 0x07, 0x00], [0x3B, 0x07, 0x00], [0x3C, 0x08, 0x00], [0x3D, 0x08, 0x00],
    [0x3F, 0x09, 0x00], [0x3F, 0x09, 0x00], [0x3F, 0x0A, 0x00], [0x3F, 0x0A, 0x00],
    [0x3F, 0x0B, 0x00], [0x3F, 0x0B, 0x00], [0x3F, 0x0C, 0x00], [0x3F, 0x0C, 0x00],
    [0x3F, 0x0D, 0x00], [0x3F, 0x0D, 0x00], [0x3F, 0x0E, 0x00], [0x3F, 0x0E, 0x00],
    [0x3F, 0x0F, 0x00], [0x3F, 0x0F, 0x00], [0x3F, 0x10, 0x00], [0x3F, 0x10, 0x00],
    [0x3F, 0x11, 0x00], [0x3F, 0x11, 0x00], [0x3F, 0x12, 0x00], [0x3F, 0x12, 0x00],
    [0x3F, 0x13, 0x00], [0x3F, 0x13, 0x00], [0x3F, 0x14, 0x00], [0x3F, 0x14, 0x00],
    [0x3F, 0x15, 0x00], [0x3F, 0x15, 0x00], [0x3F, 0x16, 0x00], [0x3F, 0x16, 0x00],
    [0x3F, 0x17, 0x00], [0x3F, 0x18, 0x00], [0x3F, 0x18, 0x00], [0x3F, 0x19, 0x00],
    [0x3F, 0x19, 0x00], [0x3F, 0x1A, 0x00], [0x3F, 0x1A, 0x00], [0x3F, 0x1B, 0x00],
    [0x3F, 0x1B, 0x00], [0x3F, 0x1C, 0x00], [0x3F, 0x1C, 0x00], [0x3F, 0x1D, 0x00],
    [0x3F, 0x1D, 0x00], [0x3F, 0x1E, 0x00], [0x3F, 0x1E, 0x00], [0x3F, 0x1F, 0x00],
    [0x3F, 0x1F, 0x00], [0x3F, 0x20, 0x00], [0x3F, 0x20, 0x00], [0x3F, 0x21, 0x00],
    [0x3F, 0x21, 0x00], [0x3F, 0x22, 0x00], [0x3F, 0x22, 0x00], [0x3F, 0x23, 0x00],
    [0x3F, 0x23, 0x00], [0x3F, 0x24, 0x00], [0x3F, 0x24, 0x00], [0x3F, 0x25, 0x00],
    [0x3F, 0x26, 0x00], [0x3F, 0x26, 0x00], [0x3F, 0x27, 0x00], [0x3F, 0x27, 0x00],
    [0x3F, 0x28, 0x00], [0x3F, 0x28, 0x00], [0x3F, 0x29, 0x00], [0x3F, 0x29, 0x00],
    [0x3F, 0x2A, 0x00], [0x3F, 0x2A, 0x00], [0x3F, 0x2B, 0x00], [0x3F, 0x2B, 0x00],
    [0x3F, 0x2C, 0x00], [0x3F, 0x2C, 0x00], [0x3F, 0x2D, 0x00], [0x3F, 0x2D, 0x00],
    [0x3F, 0x2E, 0x00], [0x3F, 0x2E, 0x00], [0x3F, 0x2F, 0x00], [0x3F, 0x2F, 0x00],
    [0x3F, 0x30, 0x00], [0x3F, 0x30, 0x00], [0x3F, 0x31, 0x00], [0x3F, 0x31, 0x00],
    [0x3F, 0x32, 0x00], [0x3F, 0x32, 0x00], [0x3F, 0x33, 0x00], [0x3F, 0x34, 0x00],
    [0x3F, 0x34, 0x00], [0x3F, 0x34, 0x00], [0x3F, 0x34, 0x00], [0x3F, 0x34, 0x00],
    [0x3F, 0x35, 0x00], [0x3F, 0x35, 0x00], [0x3F, 0x35, 0x00], [0x3F, 0x35, 0x00],
    [0x3F, 0x36, 0x00], [0x3F, 0x36, 0x00], [0x3F, 0x36, 0x00], [0x3F, 0x36, 0x00],
    [0x3F, 0x36, 0x00], [0x3F, 0x37, 0x00], [0x3F, 0x37, 0x00], [0x3F, 0x37, 0x00],
    [0x3F, 0x37, 0x00], [0x3F, 0x38, 0x00], [0x3F, 0x38, 0x00], [0x3F, 0x38, 0x00],
    [0x3F, 0x38, 0x00], [0x3F, 0x39, 0x00], [0x3F, 0x39, 0x00], [0x3F, 0x39, 0x00],
    [0x3F, 0x39, 0x00], [0x3F, 0x39, 0x00], [0x3F, 0x3A, 0x00], [0x3F, 0x3A, 0x00],
    [0x3F, 0x3A, 0x00], [0x3F, 0x3A, 0x00], [0x3F, 0x3B, 0x00], [0x3F, 0x3B, 0x00],
    [0x3F, 0x3B, 0x00], [0x3F, 0x3B, 0x00], [0x3F, 0x3C, 0x00], [0x3F, 0x3C, 0x00],
    [0x3F, 0x3C, 0x00], [0x3F, 0x3C, 0x00], [0x3F, 0x3C, 0x00], [0x3F, 0x3D, 0x00],
    [0x3F, 0x3D, 0x00], [0x3F, 0x3D, 0x00], [0x3F, 0x3D, 0x00], [0x3F, 0x3E, 0x00],
    [0x3F, 0x3E, 0x00], [0x3F, 0x3E, 0x00], [0x3F, 0x3E, 0x00], [0x3F, 0x3F, 0x00],
    [0x3F, 0x3F, 0x01], [0x3F, 0x3F, 0x02], [0x3F, 0x3F, 0x03], [0x3F, 0x3F, 0x04],
    [0x3F, 0x3F, 0x05], [0x3F, 0x3F, 0x06], [0x3F, 0x3F, 0x07], [0x3F, 0x3F, 0x08],
    [0x3F, 0x3F, 0x09], [0x3F, 0x3F, 0x0A], [0x3F, 0x3F, 0x0A], [0x3F, 0x3F, 0x0B],
    [0x3F, 0x3F, 0x0C], [0x3F, 0x3F, 0x0D], [0x3F, 0x3F, 0x0E], [0x3F, 0x3F, 0x0F],
    [0x3F, 0x3F, 0x10], [0x3F, 0x3F, 0x11], [0x3F, 0x3F, 0x12], [0x3F, 0x3F, 0x13],
    [0x3F, 0x3F, 0x14], [0x3F, 0x3F, 0x15], [0x3F, 0x3F, 0x15], [0x3F, 0x3F, 0x16],
    [0x3F, 0x3F, 0x17], [0x3F, 0x3F, 0x18], [0x3F, 0x3F, 0x19], [0x3F, 0x3F, 0x1A],
    [0x3F, 0x3F, 0x1B], [0x3F, 0x3F, 0x1C], [0x3F, 0x3F, 0x1D], [0x3F, 0x3F, 0x1E],
    [0x3F, 0x3F, 0x1F], [0x3F, 0x3F, 0x1F], [0x3F, 0x3F, 0x20], [0x3F, 0x3F, 0x21],
    [0x3F, 0x3F, 0x22], [0x3F, 0x3F, 0x23], [0x3F, 0x3F, 0x24], [0x3F, 0x3F, 0x25],
    [0x3F, 0x3F, 0x26], [0x3F, 0x3F, 0x27], [0x3F, 0x3F, 0x28], [0x3F, 0x3F, 0x29],
    [0x3F, 0x3F, 0x2A], [0x3F, 0x3F, 0x2A], [0x3F, 0x3F, 0x2B], [0x3F, 0x3F, 0x2C],
    [0x3F, 0x3F, 0x2D], [0x3F, 0x3F, 0x2E], [0x3F, 0x3F, 0x2F], [0x3F, 0x3F, 0x30],
    [0x3F, 0x3F, 0x31], [0x3F, 0x3F, 0x32], [0x3F, 0x3F, 0x33], [0x3F, 0x3F, 0x34],
    [0x3F, 0x3F, 0x34], [0x3F, 0x3F, 0x35], [0x3F, 0x3F, 0x36], [0x3F, 0x3F, 0x37],
    [0x3F, 0x3F, 0x38], [0x3F, 0x3F, 0x39], [0x3F, 0x3F, 0x3A], [0x3F, 0x3F, 0x3B],
    [0x3F, 0x3F, 0x3C], [0x3F, 0x3F, 0x3D], [0x3F, 0x3F, 0x3E], [0x3F, 0x3F, 0x3F]
];


/** plasma */
(function () {
    let scr;
    let buffer;
    let palIdx = 0;

    function setup() {
        scr = dcl.setupScreen(window.innerWidth, window.innerHeight);
        scr.setBgColor('black');
        document.body.style.backgroundColor = 'black';
        buffer = dcl.createBuffer(scr.width, scr.height).capture();
        firePalette256 = makeLoopingPalette(firePalette256, 256);
    }

    function makeLoopingPalette(palette, length) {
        // bin every other color using filter
        let result = palette.filter((_, i) => i % 2 === 0);
        result = result.concat(result.slice().reverse());
        return result;
    }

    function draw(dt) {
        dcl.clear();
        let t = dt * 0.2;
        // loop over all pixels
        for (let y = 0; y < scr.height; y++) {
            for (let x = 0; x < scr.width; x++) {
                if (y < 20) {
                    // draw a gradient
                    drawPalette(x, y);
                } else {
                    drawPlasma(x, y, t);
                }
            }
        }

        // draw the buffer to the screen
        scr.ctx.putImageData(buffer, 0, 0);

    }

    function sinusoid(val, wavelength, max) {
        return 0;
    }

    function drawPlasma(x, y, t) {
        
    }
    function drawPalette(x, y) {
        const colorIdx = (palIdx + Math.floor((x / scr.width) * 255)) % 256;
        const color = firePalette256[colorIdx];
        if (!color) {
            console.log(colorIdx);
        }
        bufferPixel(x, y, color);
    }

    function loop(dt) {
        palIdx = (palIdx + 1) % 256;
        draw(dt);
        requestAnimationFrame(loop);
    }

    setup();
    loop(0);
    function bufferPixel(x, y, color) {
        // draw pixel to imageData buffer
        if (!color) console.log(x, y, color);
        const r = Math.min(255, Math.floor(color[0] * 3));
        const g = Math.min(255, Math.floor(color[1] * 3));
        const b = Math.min(255, Math.floor(color[2] * 3));
        const index = (y * scr.width + x) * 4;
        buffer.data[index] = r;
        buffer.data[index + 1] = g;
        buffer.data[index + 2] = b;
        buffer.data[index + 3] = 255; // alpha
    }


})();
